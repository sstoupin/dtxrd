#!/usr/bin/env python

'''
a program to extract individual scans from a file generated by SPEC

:author:    Stanislav Stoupin
:email:     sstoupin@aps.anl.gov

:copyright: Copyright 2014 by XSD, Advanced Photon Source, Argonne National Laboratory
:license:   UChicago Argonne, LLC Open Source License, see LICENSE for details.
'''

import sys
#from numpy import *

__version__='0.02'
proginfo = 'specscan v' + __version__ + ', by Stanislav Stoupin <sstoupin@aps.anl.gov>'

########################################################################
# modifications:
########################################################################
#v0.02  now writes data only upon request (-w option)
#       by default only prints columns
#---------------------------------------------------
# Functions
#---------------------------------------------------

cbank=('b','g','r','c','m','y')

#############################################################################################

def fatalError(msg):
        sys.stderr.write('Error: ')
        sys.stderr.write(str(msg))
        sys.stderr.write('\n')
        sys.exit(1)
                                
def fatalIOError(err):
        if issubclass(err.__class__, IOError) and err.strerror and err.filename:
                  err = '%s: %s' % (err.strerror, err.filename)
        fatalError(err)
                                                                
def ParseArguments(args):
        try:
                from optik import OptionParser
        except ImportError:
                try:
                       from optparse import OptionParser
                except ImportError:
                       fatalError(
'This program requires Optik, availible from http://optik.sourceforge.net/\n')

        USAGE = '%prog [OPTIONS...] scan_numbers FILENAME'
        VERSION = '%prog ' + __version__ + ', by Stanislav Stoupin <sstoupin@aps.anl.gov>\n' \
        +'the program performs extraction of scans with numbers scan_numbers from a SPEC file (FILENAME)\n' \
        +'returning individual files with headers'
        parser = OptionParser(usage=USAGE, version=VERSION)                        
#################################################################################################
        # Behavior
#################################################################################################
        
        #Output
        parser.add_option('-w', '--write',
                action='store_const',
                const=1,
                dest='write', 
                default=0,  
                help='write extracted scans into files scan#.dat')
        ##########################################################################################    
        #Parameters
        ##########################################################################################
        opts, args = parser.parse_args(args)
        if len(args) < 1:
                parser.print_usage()
                sys.exit(1)
#        elif len(args) > 1:
#                parser.print_usage()
#                sys.exit(1)                
        return opts, args                
##################################################################################################
## Main stuff
##################################################################################################


def main():
        options, args = ParseArguments(sys.argv[1:])
        
        #--------------------------------------------------------                
        # initialize variables :
        #--------------------------------------------------------        
        
        count=0
        #--------------------------------------------------------
        # do stuff
        #--------------------------------------------------------        
        
        ind_fn=len(args)-1
        fileName=args[ind_fn]
        scans=args[0:ind_fn]  
        
        for fn in scans:
            raw=open(fileName, 'r')             
            count=count+1 
            #
            header=''
            data=''
            while 1:
                line=raw.readline()
                if not(line):
                    break
                if line[0:2]=='#S':                
                    splitline=line.split()                    
                    if splitline[1]==str(fn):
                        print line
                        header=header+line
                        #                        
                        while 2:
                            line1=raw.readline()
                            char1=line1[0:1]
                            lst1=line1.split()
                            if lst1==[]:
                                break
                            elif not(line1):
                                break                                                                                                                
                            elif char1=='#':
                                header=header+line1 
                                if lst1[0]=='#L':
                                    print 'columns in the scan:'
                                    names=lst1[1:]
                                    numbers=range(1,len(names)+1)
                                    for (i,x) in map(None,numbers,names):
                                        print 'col '+str(i)+': '+x
                            else:
                                data=data+line1 
            
            if opts.write==1:
             outFile=open(fn+'.dat', 'w'); print "writing extracted scan into a file"            
             outFile.write(header)
             outFile.write(data)
             outFile.close()
             raw.close()  


if __name__ == '__main__':
    main()
